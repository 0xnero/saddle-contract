{
  "address": "0x5d5F01AaEc428356B54Ee091502dBBEaA935F21A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSwap",
      "outputs": [
        {
          "internalType": "contract ISwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "baseTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwap",
          "name": "_baseSwap",
          "type": "address"
        },
        {
          "internalType": "contract IMetaSwap",
          "name": "_metaSwap",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_metaLPToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metaSwap",
      "outputs": [
        {
          "internalType": "contract IMetaSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metaTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc90fafd1f61a568dfc7ad56220c20eb00aa949a23324fa0cbd7297854b709a1",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0x5d5F01AaEc428356B54Ee091502dBBEaA935F21A",
    "transactionIndex": 12,
    "gasUsed": "3293366",
    "logsBloom": "0x
    "blockHash": "0xb09d74ab0d0d2ba355e13e45f6c11ea527a892e8e47c25aa6d469e91bff032f4",
    "transactionHash": "0xfc90fafd1f61a568dfc7ad56220c20eb00aa949a23324fa0cbd7297854b709a1",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 15525001,
        "transactionHash": "0xfc90fafd1f61a568dfc7ad56220c20eb00aa949a23324fa0cbd7297854b709a1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000af91fa049a7e1894f480bfe5bba20142c6c29a9",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003a807ea0ba0c0000000000000000000000000000000000000000000000000425eef26b2b2a6747000000000000000000000000000000000000000000000203298e45f0d8ae829800000000000000000000000000000000000000000000000425b471ec8a705b4700000000000000000000000000000000000000000000020329c8c66f79688e98",
        "logIndex": 16,
        "blockHash": "0xb09d74ab0d0d2ba355e13e45f6c11ea527a892e8e47c25aa6d469e91bff032f4"
      }
    ],
    "blockNumber": 15525001,
    "cumulativeGasUsed": "4587635",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "de5675f2de4a73f29d0556003e48b431",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSwap\",\"outputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwap\",\"name\":\"_baseSwap\",\"type\":\"address\"},{\"internalType\":\"contract IMetaSwap\",\"name\":\"_metaSwap\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_metaLPToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaSwap\",\"outputs\":[{\"internalType\":\"contract IMetaSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metaTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256[],uint256,uint256)\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision\",\"deadline\":\"latest timestamp to accept this transaction\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\"},\"returns\":{\"_0\":\"amount of LP token user minted and received\"}},\"calculateRemoveLiquidity(address,uint256)\":{\"params\":{\"account\":\"the address that is withdrawing tokens\",\"amount\":\"the amount of LP tokens that would be burned on withdrawal\"},\"returns\":{\"_0\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(address,uint256,uint8)\":{\"params\":{\"account\":\"the address that is withdrawing tokens\",\"tokenAmount\":\"the amount of LP token to burn\",\"tokenIndex\":\"index of which token will be withdrawn\"},\"returns\":{\"_0\":\"availableTokenAmount calculated amount of underlying token available to withdraw\"}},\"calculateSwap(uint8,uint8,uint256)\":{\"params\":{\"dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"tokenIndexFrom\":\"the token the user wants to sell\",\"tokenIndexTo\":\"the token the user wants to buy\"},\"returns\":{\"_0\":\"amount of tokens the user will receive\"}},\"calculateTokenAmount(address,uint256[],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"account\":\"address that is depositing or withdrawing tokens\",\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"deposit\":\"whether this is a deposit or a withdrawal\"},\"returns\":{\"_0\":\"token amount the user will receive\"}},\"getToken(uint256)\":{\"params\":{\"index\":\"the index of the token\"},\"returns\":{\"_0\":\"address of the token at given index\"}},\"initialize(address,address,address)\":{\"params\":{\"_baseSwap\":\"the address of the base Swap contract\",\"_metaLPToken\":\"the address of the MetaSwap LP token contract\",\"_metaSwap\":\"the address of the MetaSwap contract\"}},\"removeLiquidity(uint256,uint256[],uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation\"},\"returns\":{\"_0\":\"amounts of tokens user received\"}},\"removeLiquidityImbalance(uint256[],uint256,uint256)\":{\"params\":{\"amounts\":\"how much of each token to withdraw\",\"deadline\":\"latest timestamp to accept this transaction\",\"maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\"},\"returns\":{\"_0\":\"amount of LP tokens burned\"}},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"tokenAmount\":\"the amount of the token you want to receive\",\"tokenIndex\":\"the index of the token you want to receive\"},\"returns\":{\"_0\":\"amount of chosen token user received\"}},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"params\":{\"deadline\":\"latest timestamp to accept this transaction\",\"dx\":\"the amount of tokens the user wants to swap from\",\"minDy\":\"the min amount the user would like to receive, or revert.\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"}}},\"title\":\"MetaSwapDeposit\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256[],uint256,uint256)\":{\"notice\":\"Add liquidity to the pool with the given amounts of tokens\"},\"calculateRemoveLiquidity(address,uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(address,uint256,uint8)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"calculateSwap(uint8,uint8,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"calculateTokenAmount(address,uint256[],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running. When withdrawing from the base pool in imbalanced fashion, the recommended slippage setting is 0.2% or higher.\"},\"getToken(uint256)\":{\"notice\":\"Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range. This is a flattened representation of the pooled tokens.\"},\"initialize(address,address,address)\":{\"notice\":\"Sets the address for the base Swap contract, MetaSwap contract, and the MetaSwap LP token contract.\"},\"removeLiquidity(uint256,uint256[],uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityImbalance(uint256[],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"removeLiquidityOneToken(uint256,uint8,uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply.\"},\"swap(uint8,uint8,uint256,uint256,uint256)\":{\"notice\":\"Swap two underlying tokens using the meta pool and the base pool\"}},\"notice\":\"This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be deployed before this contract can be initialized successfully. For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and sUSD. MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act as a Swap containing [sUSD, DAI, USDC, USDT] tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/meta/MetaSwapDeposit.sol\":\"MetaSwapDeposit\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd0359e87fe2618573f49a95e13d9dbc31521ad64526b135618abb2a2dc362fbe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ISwap.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\n */\\ncontract LPToken is ERC20BurnableUpgradeable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @notice Initializes this LPToken contract with the given name and symbol\\n     * @dev The caller of this function will become the owner. A Swap contract should call this\\n     * in its initializer function.\\n     * @param name name of this token\\n     * @param symbol symbol of this token\\n     */\\n    function initialize(string memory name, string memory symbol)\\n        external\\n        initializer\\n        returns (bool)\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n        __Ownable_init_unchained();\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n        _mint(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n     * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\n     * This assumes the owner is set to a Swap contract's address.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override(ERC20Upgradeable) {\\n        super._beforeTokenTransfer(from, to, amount);\\n        require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\n        ISwap(owner()).updateUserWithdrawFee(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x04d16f4aee0b8136919bff9ce90a46b2347bd88540072b2b20cf4596be94e5c6\",\"license\":\"MIT\"},\"contracts/interfaces/IMetaSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMetaSwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function isGuarded() external view returns (bool);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateSwapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initializeMetaSwap(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        uint256 withdrawFee,\\n        address lpTokenTargetAddress,\\n        address baseSwap\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function swapUnderlying(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n        external;\\n\\n    function swapStorage()\\n        external\\n        view\\n        returns (\\n            uint256 initialA,\\n            uint256 futureA,\\n            uint256 initialATime,\\n            uint256 futureATime,\\n            uint256 swapFee,\\n            uint256 adminFee,\\n            uint256 defaultWithdrawFee,\\n            address lpToken\\n        );\\n}\\n\",\"keccak256\":\"0x4edf9c18f50e96b28e9a7e0eb325d816b2759f617511547d5cf3676315d74b9c\",\"license\":\"MIT\"},\"contracts/interfaces/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface ISwap {\\n    // pool data view functions\\n    function getA() external view returns (uint256);\\n\\n    function getToken(uint8 index) external view returns (IERC20);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n    function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    // min return calculation functions\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calculateRemoveLiquidity(address account, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256 availableTokenAmount);\\n\\n    // state modifying functions\\n    function initialize(\\n        IERC20[] memory pooledTokens,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 a,\\n        uint256 fee,\\n        uint256 adminFee,\\n        uint256 withdrawFee,\\n        address lpTokenTargetAddress\\n    ) external;\\n\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    // withdraw fee update function\\n    function updateUserWithdrawFee(address recipient, uint256 transferAmount)\\n        external;\\n}\\n\",\"keccak256\":\"0x748681510428cd47c8f4c04deb206e889f5010b40a679fba4ce5677d0f0c10c7\",\"license\":\"MIT\"},\"contracts/meta/MetaSwapDeposit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../LPToken.sol\\\";\\nimport \\\"../interfaces/ISwap.sol\\\";\\nimport \\\"../interfaces/IMetaSwap.sol\\\";\\n\\n/**\\n * @title MetaSwapDeposit\\n * @notice This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be\\n * deployed before this contract can be initialized successfully.\\n *\\n * For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT].\\n * Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either\\n * the LP token or the underlying tokens and sUSD.\\n *\\n * MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users\\n * to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act\\n * as a Swap containing [sUSD, DAI, USDC, USDT] tokens.\\n */\\ncontract MetaSwapDeposit is Initializable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    ISwap public baseSwap;\\n    IMetaSwap public metaSwap;\\n    IERC20[] public baseTokens;\\n    IERC20[] public metaTokens;\\n    IERC20[] public tokens;\\n    IERC20 public metaLPToken;\\n\\n    uint256 constant MAX_UINT256 = 2**256 - 1;\\n\\n    struct RemoveLiquidityImbalanceInfo {\\n        ISwap baseSwap;\\n        IMetaSwap metaSwap;\\n        IERC20 metaLPToken;\\n        uint8 baseLPTokenIndex;\\n        bool withdrawFromBase;\\n        uint256 leftoverMetaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Sets the address for the base Swap contract, MetaSwap contract, and the\\n     * MetaSwap LP token contract.\\n     * @param _baseSwap the address of the base Swap contract\\n     * @param _metaSwap the address of the MetaSwap contract\\n     * @param _metaLPToken the address of the MetaSwap LP token contract\\n     */\\n    function initialize(\\n        ISwap _baseSwap,\\n        IMetaSwap _metaSwap,\\n        IERC20 _metaLPToken\\n    ) external initializer {\\n        __ReentrancyGuard_init();\\n        // Check and approve base level tokens to be deposited to the base Swap contract\\n        {\\n            uint8 i;\\n            for (; i < 32; i++) {\\n                try _baseSwap.getToken(i) returns (IERC20 token) {\\n                    baseTokens.push(token);\\n                    token.safeApprove(address(_baseSwap), MAX_UINT256);\\n                    token.safeApprove(address(_metaSwap), MAX_UINT256);\\n                } catch {\\n                    break;\\n                }\\n            }\\n            require(i > 1, \\\"baseSwap must have at least 2 tokens\\\");\\n        }\\n\\n        // Check and approve meta level tokens to be deposited to the MetaSwap contract\\n        IERC20 baseLPToken;\\n        {\\n            uint8 i;\\n            for (; i < 32; i++) {\\n                try _metaSwap.getToken(i) returns (IERC20 token) {\\n                    baseLPToken = token;\\n                    metaTokens.push(token);\\n                    tokens.push(token);\\n                    token.safeApprove(address(_metaSwap), MAX_UINT256);\\n                } catch {\\n                    break;\\n                }\\n            }\\n            require(i > 1, \\\"metaSwap must have at least 2 tokens\\\");\\n        }\\n\\n        // Flatten baseTokens and append it to tokens array\\n        tokens[tokens.length - 1] = baseTokens[0];\\n        for (uint8 i = 1; i < baseTokens.length; i++) {\\n            tokens.push(baseTokens[i]);\\n        }\\n\\n        // Approve base Swap LP token to be burned by the base Swap contract for withdrawing\\n        baseLPToken.safeApprove(address(_baseSwap), MAX_UINT256);\\n        // Approve MetaSwap LP token to be burned by the MetaSwap contract for withdrawing\\n        _metaLPToken.safeApprove(address(_metaSwap), MAX_UINT256);\\n\\n        // Initialize storage variables\\n        baseSwap = _baseSwap;\\n        metaSwap = _metaSwap;\\n        metaLPToken = _metaLPToken;\\n    }\\n\\n    // Mutative functions\\n\\n    /**\\n     * @notice Swap two underlying tokens using the meta pool and the base pool\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param dx the amount of tokens the user wants to swap from\\n     * @param minDy the min amount the user would like to receive, or revert.\\n     * @param deadline latest timestamp to accept this transaction\\n     */\\n    function swap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        tokens[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 tokenToAmount =\\n            metaSwap.swapUnderlying(\\n                tokenIndexFrom,\\n                tokenIndexTo,\\n                dx,\\n                minDy,\\n                deadline\\n            );\\n        tokens[tokenIndexTo].safeTransfer(msg.sender, tokenToAmount);\\n        return tokenToAmount;\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool with the given amounts of tokens\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        // Read to memory to save on gas\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n\\n        require(amounts.length == memBaseTokens.length + baseLPTokenIndex);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Transfer base tokens from the caller and deposit to the base Swap pool\\n            uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n            bool shouldDepositBaseTokens;\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                IERC20 token = memBaseTokens[i];\\n                uint256 depositAmount = amounts[baseLPTokenIndex + i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    baseAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                    // if there are any base Swap level tokens, flag it for deposits\\n                    shouldDepositBaseTokens = true;\\n                }\\n            }\\n            if (shouldDepositBaseTokens) {\\n                // Deposit any base Swap level tokens and receive baseLPToken\\n                baseLPTokenAmount = baseSwap.addLiquidity(\\n                    baseAmounts,\\n                    0,\\n                    deadline\\n                );\\n            }\\n        }\\n\\n        uint256 metaLPTokenAmount;\\n        {\\n            // Transfer remaining meta level tokens from the caller\\n            uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                IERC20 token = memMetaTokens[i];\\n                uint256 depositAmount = amounts[i];\\n                if (depositAmount > 0) {\\n                    token.safeTransferFrom(\\n                        msg.sender,\\n                        address(this),\\n                        depositAmount\\n                    );\\n                    metaAmounts[i] = token.balanceOf(address(this)); // account for any fees on transfer\\n                }\\n            }\\n            // Update the baseLPToken amount that will be deposited\\n            metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n\\n            // Deposit the meta level tokens and the baseLPToken\\n            metaLPTokenAmount = metaSwap.addLiquidity(\\n                metaAmounts,\\n                minToMint,\\n                deadline\\n            );\\n        }\\n\\n        // Transfer the meta lp token to the caller\\n        metaLPToken.safeTransfer(msg.sender, metaLPTokenAmount);\\n\\n        return metaLPTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[] calldata minAmounts,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256[] memory) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory totalRemovedAmounts;\\n\\n        {\\n            uint256 numOfAllTokens =\\n                memBaseTokens.length + memMetaTokens.length - 1;\\n            require(minAmounts.length == numOfAllTokens, \\\"out of range\\\");\\n            totalRemovedAmounts = new uint256[](numOfAllTokens);\\n        }\\n\\n        // Transfer meta lp token from the caller to this\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 baseLPTokenAmount;\\n        {\\n            // Remove liquidity from the MetaSwap pool\\n            uint256[] memory removedAmounts;\\n            uint256 baseLPTokenIndex = memMetaTokens.length - 1;\\n            {\\n                uint256[] memory metaMinAmounts =\\n                    new uint256[](memMetaTokens.length);\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    metaMinAmounts[i] = minAmounts[i];\\n                }\\n                removedAmounts = metaSwap.removeLiquidity(\\n                    amount,\\n                    metaMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the meta level tokens to the caller\\n            for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                totalRemovedAmounts[i] = removedAmounts[i];\\n                memMetaTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n            baseLPTokenAmount = removedAmounts[baseLPTokenIndex];\\n\\n            // Remove liquidity from the base Swap pool\\n            {\\n                uint256[] memory baseMinAmounts =\\n                    new uint256[](memBaseTokens.length);\\n                for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n                    baseMinAmounts[i] = minAmounts[baseLPTokenIndex + i];\\n                }\\n                removedAmounts = baseSwap.removeLiquidity(\\n                    baseLPTokenAmount,\\n                    baseMinAmounts,\\n                    deadline\\n                );\\n            }\\n\\n            // Send the base level tokens to the caller\\n            for (uint8 i = 0; i < memBaseTokens.length; i++) {\\n                totalRemovedAmounts[baseLPTokenIndex + i] = removedAmounts[i];\\n                memBaseTokens[i].safeTransfer(msg.sender, removedAmounts[i]);\\n            }\\n        }\\n\\n        return totalRemovedAmounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param tokenAmount the amount of the token you want to receive\\n     * @param tokenIndex the index of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        uint8 tokenIndex,\\n        uint256 minAmount,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n        uint8 baseTokensLength = uint8(baseTokens.length);\\n\\n        // Transfer metaLPToken from the caller\\n        metaLPToken.safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\n        IERC20 token;\\n        if (tokenIndex < baseLPTokenIndex) {\\n            // When the desired token is meta level token, we can just call `removeLiquidityOneToken` directly\\n            metaSwap.removeLiquidityOneToken(\\n                tokenAmount,\\n                tokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = metaTokens[tokenIndex];\\n        } else if (tokenIndex < baseLPTokenIndex + baseTokensLength) {\\n            // When the desired token is a base level token, we need to first withdraw via baseLPToken, then withdraw\\n            // the desired token from the base Swap contract.\\n            uint256 removedBaseLPTokenAmount =\\n                metaSwap.removeLiquidityOneToken(\\n                    tokenAmount,\\n                    baseLPTokenIndex,\\n                    0,\\n                    deadline\\n                );\\n\\n            baseSwap.removeLiquidityOneToken(\\n                removedBaseLPTokenAmount,\\n                tokenIndex - baseLPTokenIndex,\\n                minAmount,\\n                deadline\\n            );\\n            token = baseTokens[tokenIndex - baseLPTokenIndex];\\n        } else {\\n            revert(\\\"out of range\\\");\\n        }\\n\\n        uint256 amountWithdrawn = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, amountWithdrawn);\\n        return amountWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances. Withdraw fee that decays linearly\\n     * over period of 4 weeks since last deposit will apply.\\n     * @param amounts how much of each token to withdraw\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount,\\n        uint256 deadline\\n    ) external nonReentrant returns (uint256) {\\n        IERC20[] memory memBaseTokens = baseTokens;\\n        IERC20[] memory memMetaTokens = metaTokens;\\n        uint256[] memory metaAmounts = new uint256[](memMetaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](memBaseTokens.length);\\n\\n        require(\\n            amounts.length == memBaseTokens.length + memMetaTokens.length - 1,\\n            \\\"out of range\\\"\\n        );\\n\\n        RemoveLiquidityImbalanceInfo memory v =\\n            RemoveLiquidityImbalanceInfo(\\n                baseSwap,\\n                metaSwap,\\n                metaLPToken,\\n                uint8(metaAmounts.length - 1),\\n                false,\\n                0\\n            );\\n\\n        for (uint8 i = 0; i < v.baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[v.baseLPTokenIndex + i];\\n            if (baseAmounts[i] > 0) {\\n                v.withdrawFromBase = true;\\n            }\\n        }\\n\\n        // Calculate how much base LP token we need to get the desired amount of underlying tokens\\n        if (v.withdrawFromBase) {\\n            metaAmounts[v.baseLPTokenIndex] = v\\n                .baseSwap\\n                .calculateTokenAmount(address(this), baseAmounts, false)\\n                .mul(10005)\\n                .div(10000);\\n        }\\n\\n        // Transfer MetaSwap LP token from the caller to this contract\\n        v.metaLPToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            maxBurnAmount\\n        );\\n\\n        // Withdraw the paired meta level tokens and the base LP token from the MetaSwap pool\\n        uint256 burnedMetaLPTokenAmount =\\n            v.metaSwap.removeLiquidityImbalance(\\n                metaAmounts,\\n                maxBurnAmount,\\n                deadline\\n            );\\n        v.leftoverMetaLPTokenAmount = maxBurnAmount.sub(\\n            burnedMetaLPTokenAmount\\n        );\\n\\n        // If underlying tokens are desired, withdraw them from the base Swap pool\\n        if (v.withdrawFromBase) {\\n            v.baseSwap.removeLiquidityImbalance(\\n                baseAmounts,\\n                metaAmounts[v.baseLPTokenIndex],\\n                deadline\\n            );\\n\\n            // Base Swap may require LESS base LP token than the amount we have\\n            // In that case, deposit it to the MetaSwap pool.\\n            uint256[] memory leftovers = new uint256[](metaAmounts.length);\\n            IERC20 baseLPToken = memMetaTokens[v.baseLPTokenIndex];\\n            uint256 leftoverBaseLPTokenAmount =\\n                baseLPToken.balanceOf(address(this));\\n            if (leftoverBaseLPTokenAmount > 0) {\\n                leftovers[v.baseLPTokenIndex] = leftoverBaseLPTokenAmount;\\n                v.leftoverMetaLPTokenAmount = v.leftoverMetaLPTokenAmount.add(\\n                    v.metaSwap.addLiquidity(leftovers, 0, deadline)\\n                );\\n            }\\n        }\\n\\n        // Transfer all withdrawn tokens to the caller\\n        for (uint8 i = 0; i < amounts.length; i++) {\\n            IERC20 token;\\n            if (i < v.baseLPTokenIndex) {\\n                token = memMetaTokens[i];\\n            } else {\\n                token = memBaseTokens[i - v.baseLPTokenIndex];\\n            }\\n            if (amounts[i] > 0) {\\n                token.safeTransfer(msg.sender, amounts[i]);\\n            }\\n        }\\n\\n        // If there were any extra meta lp token, transfer them back to the caller as well\\n        if (v.leftoverMetaLPTokenAmount > 0) {\\n            v.metaLPToken.safeTransfer(msg.sender, v.leftoverMetaLPTokenAmount);\\n        }\\n\\n        return maxBurnAmount - v.leftoverMetaLPTokenAmount;\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running. When withdrawing from the base pool in imbalanced\\n     * fashion, the recommended slippage setting is 0.2% or higher.\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param account address that is depositing or withdrawing tokens\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pooledTokens. The amount should be in each\\n     * pooled token's native precision. If a token charges a fee on transfers,\\n     * use the amount that gets transferred after the fee.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return token amount the user will receive\\n     */\\n    function calculateTokenAmount(\\n        address account,\\n        uint256[] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256) {\\n        account = address(this);\\n        uint256[] memory metaAmounts = new uint256[](metaTokens.length);\\n        uint256[] memory baseAmounts = new uint256[](baseTokens.length);\\n        uint256 baseLPTokenIndex = metaAmounts.length - 1;\\n\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            metaAmounts[i] = amounts[i];\\n        }\\n\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            baseAmounts[i] = amounts[baseLPTokenIndex + i];\\n        }\\n\\n        uint256 baseLPTokenAmount =\\n            baseSwap.calculateTokenAmount(account, baseAmounts, deposit);\\n        metaAmounts[baseLPTokenIndex] = baseLPTokenAmount;\\n\\n        return metaSwap.calculateTokenAmount(account, metaAmounts, deposit);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param account the address that is withdrawing tokens\\n     * @param amount the amount of LP tokens that would be burned on withdrawal\\n     * @return array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(address account, uint256 amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        account = address(this); // overwrite account\\n        uint256[] memory metaAmounts =\\n            metaSwap.calculateRemoveLiquidity(account, amount);\\n        uint8 baseLPTokenIndex = uint8(metaAmounts.length - 1);\\n        uint256[] memory baseAmounts =\\n            baseSwap.calculateRemoveLiquidity(\\n                account,\\n                metaAmounts[baseLPTokenIndex]\\n            );\\n\\n        uint256[] memory totalAmounts =\\n            new uint256[](baseLPTokenIndex + baseAmounts.length);\\n        for (uint8 i = 0; i < baseLPTokenIndex; i++) {\\n            totalAmounts[i] = metaAmounts[i];\\n        }\\n        for (uint8 i = 0; i < baseAmounts.length; i++) {\\n            totalAmounts[baseLPTokenIndex + i] = baseAmounts[i];\\n        }\\n\\n        return totalAmounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param account the address that is withdrawing tokens\\n     * @param tokenAmount the amount of LP token to burn\\n     * @param tokenIndex index of which token will be withdrawn\\n     * @return availableTokenAmount calculated amount of underlying token\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(\\n        address account,\\n        uint256 tokenAmount,\\n        uint8 tokenIndex\\n    ) external view returns (uint256) {\\n        account = address(this); // overwrite account\\n        uint8 baseLPTokenIndex = uint8(metaTokens.length - 1);\\n\\n        if (tokenIndex < baseLPTokenIndex) {\\n            return\\n                metaSwap.calculateRemoveLiquidityOneToken(\\n                    account,\\n                    tokenAmount,\\n                    tokenIndex\\n                );\\n        } else {\\n            uint256 baseLPTokenAmount =\\n                metaSwap.calculateRemoveLiquidityOneToken(\\n                    account,\\n                    tokenAmount,\\n                    baseLPTokenIndex\\n                );\\n            return\\n                baseSwap.calculateRemoveLiquidityOneToken(\\n                    account,\\n                    baseLPTokenAmount,\\n                    tokenIndex - baseLPTokenIndex\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range.\\n     * This is a flattened representation of the pooled tokens.\\n     * @param index the index of the token\\n     * @return address of the token at given index\\n     */\\n    function getToken(uint256 index) external view returns (IERC20) {\\n        require(index < tokens.length, \\\"index out of range\\\");\\n        return tokens[index];\\n    }\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param tokenIndexFrom the token the user wants to sell\\n     * @param tokenIndexTo the token the user wants to buy\\n     * @param dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return amount of tokens the user will receive\\n     */\\n    function calculateSwap(\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 dx\\n    ) external view returns (uint256) {\\n        return\\n            metaSwap.calculateSwapUnderlying(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n}\\n\",\"keccak256\":\"0x5409374bf9883ee4d0a2e62e5f778d1c186718c5a280122c7183033dfd67e645\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80639750a8ee116100b2578063cb2ef5fe11610081578063e4b50cb811610066578063e4b50cb81461048c578063f9273ffb146104a9578063fd0bd0991461052b5761011b565b8063cb2ef5fe1461047c578063d2650472146104845761011b565b80639750a8ee146103d557806398899f40146103dd578063a95b089f14610412578063c0c53b8b146104425761011b565b80634f64b2be116100ee5780634f64b2be146102da5780637c61e561146102f757806384cdd9bc1461032357806391695586146103995761011b565b806331cd52b014610120578063328123a2146101e75780633e3a1560146102205780634d49e87d14610264575b600080fd5b6101976004803603606081101561013657600080fd5b8135919081019060408101602082013564010000000081111561015857600080fd5b82018360208201111561016a57600080fd5b8035906020019184602083028401116401000000008311171561018c57600080fd5b919350915035610548565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101d35781810151838201526020016101bb565b505050509050019250505060405180910390f35b610204600480360360208110156101fd57600080fd5b5035610ca7565b604080516001600160a01b039092168252519081900360200190f35b6102526004803603608081101561023657600080fd5b5080359060ff6020820135169060408101359060600135610cce565b60408051918252519081900360200190f35b6102526004803603606081101561027a57600080fd5b81019060208101813564010000000081111561029557600080fd5b8201836020820111156102a757600080fd5b803590602001918460208302840111640100000000831117156102c957600080fd5b9193509150803590602001356110c2565b610204600480360360208110156102f057600080fd5b50356116d5565b6101976004803603604081101561030d57600080fd5b506001600160a01b0381351690602001356116e2565b6102526004803603606081101561033957600080fd5b81019060208101813564010000000081111561035457600080fd5b82018360208201111561036657600080fd5b8035906020019184602083028401116401000000008311171561038857600080fd5b919350915080359060200135611a94565b610252600480360360a08110156103af57600080fd5b5060ff813581169160208101359091169060408101359060608101359060800135612386565b610204612512565b610252600480360360608110156103f357600080fd5b5080356001600160a01b0316906020810135906040013560ff16612521565b6102526004803603606081101561042857600080fd5b5060ff813581169160208101359091169060400135612744565b61047a6004803603606081101561045857600080fd5b506001600160a01b0381358116916020810135821691604090910135166127ee565b005b610204612d0a565b610204612d19565b610204600480360360208110156104a257600080fd5b5035612d28565b610252600480360360608110156104bf57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156104ea57600080fd5b8201836020820111156104fc57600080fd5b8035906020019184602083028401116401000000008311171561051e57600080fd5b9193509150351515612da9565b6102046004803603602081101561054157600080fd5b50356130d0565b6060600260015414156105a2576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556035805460408051602080840282018101909252828152606093909290918301828280156105fe57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105e0575b505050505090506060603680548060200260200160405190810160405280929190818152602001828054801561065d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161063f575b5050835186519495506060940160001901925050508681146106c6576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b8067ffffffffffffffff811180156106dd57600080fd5b50604051908082528060200260200182016040528015610707578160200160208202803683370190505b5060385490925061072491506001600160a01b031633308b6130dd565b600060606000600185510390506060855167ffffffffffffffff8111801561074b57600080fd5b50604051908082528060200260200182016040528015610775578160200160208202803683370190505b50905060005b828160ff1610156107be578b8b8260ff1681811061079557fe5b90506020020135828260ff16815181106107ab57fe5b602090810291909101015260010161077b565b50603460009054906101000a90046001600160a01b03166001600160a01b03166331cd52b08d838c6040518463ffffffff1660e01b81526004018084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610841578181015183820152602001610829565b50505050905001945050505050600060405180830381600087803b15801561086857600080fd5b505af115801561087c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156108c357600080fd5b81019080805160405193929190846401000000008211156108e357600080fd5b9083019060208201858111156108f857600080fd5b825186602082028301116401000000008211171561091557600080fd5b82525081516020918201928201910280838360005b8381101561094257818101518382015260200161092a565b5050505090500160405250505092505060005b818160ff1610156109e457828160ff168151811061096f57fe5b6020026020010151858260ff168151811061098657fe5b6020026020010181815250506109dc33848360ff16815181106109a557fe5b6020026020010151888460ff16815181106109bc57fe5b60200260200101516001600160a01b03166131659092919063ffffffff16565b600101610955565b508181815181106109f157fe5b602002602001015192506060865167ffffffffffffffff81118015610a1557600080fd5b50604051908082528060200260200182016040528015610a3f578160200160208202803683370190505b50905060005b828160ff161015610a8a578b8b8260ff168501818110610a6157fe5b90506020020135828260ff1681518110610a7757fe5b6020908102919091010152600101610a45565b50603360009054906101000a90046001600160a01b03166001600160a01b03166331cd52b085838c6040518463ffffffff1660e01b81526004018084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610b0d578181015183820152602001610af5565b50505050905001945050505050600060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015610b8f57600080fd5b8101908080516040519392919084640100000000821115610baf57600080fd5b908301906020820185811115610bc457600080fd5b8251866020820283011164010000000082111715610be157600080fd5b82525081516020918201928201910280838360005b83811015610c0e578181015183820152602001610bf6565b5050505090500160405250505092505060005b86518160ff161015610c9357828160ff1681518110610c3c57fe5b6020026020010151858260ff16840181518110610c5557fe5b602002602001018181525050610c8b33848360ff1681518110610c7457fe5b6020026020010151898460ff16815181106109bc57fe5b600101610c21565b505060018055509098975050505050505050565b60358181548110610cb457fe5b6000918252602090912001546001600160a01b0316905081565b600060026001541415610d28576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015560365460355460385460001990920191610d52906001600160a01b031633308a6130dd565b60008260ff168760ff161015610e3957603454604080517f3e3a1560000000000000000000000000000000000000000000000000000000008152600481018b905260ff8a166024820152604481018990526064810188905290516001600160a01b0390921691633e3a1560916084808201926020929091908290030181600087803b158015610de057600080fd5b505af1158015610df4573d6000803e3d6000fd5b505050506040513d6020811015610e0a57600080fd5b50506036805460ff8916908110610e1d57fe5b6000918252602090912001546001600160a01b03169050611021565b81830160ff168760ff161015610fd457603454604080517f3e3a1560000000000000000000000000000000000000000000000000000000008152600481018b905260ff8616602482015260006044820181905260648201899052915191926001600160a01b031691633e3a15609160848082019260209290919082900301818787803b158015610ec857600080fd5b505af1158015610edc573d6000803e3d6000fd5b505050506040513d6020811015610ef257600080fd5b5051603354604080517f3e3a15600000000000000000000000000000000000000000000000000000000081526004810184905260ff888d03166024820152604481018b9052606481018a905290519293506001600160a01b0390911691633e3a1560916084808201926020929091908290030181600087803b158015610f7757600080fd5b505af1158015610f8b573d6000803e3d6000fd5b505050506040513d6020811015610fa157600080fd5b50506035805460ff868b0316908110610fb657fe5b6000918252602090912001546001600160a01b031691506110219050565b6040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d602081101561109a57600080fd5b505190506110b26001600160a01b0383163383613165565b6001805598975050505050505050565b60006002600154141561111c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260015560358054604080516020808402820181019092528281526060939092909183018282801561117857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161115a575b50505050509050606060368054806020026020016040519081016040528092919081815260200182805480156111d757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b9575b505050505090506000600182510390508083510188889050146111f957600080fd5b60006060845167ffffffffffffffff8111801561121557600080fd5b5060405190808252806020026020018201604052801561123f578160200160208202803683370190505b5090506000805b86518160ff16101561135e576000878260ff168151811061126357fe5b6020026020010151905060008d8d8460ff16890181811061128057fe5b9050602002013590506000811115611354576112a76001600160a01b0383163330846130dd565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561130657600080fd5b505afa15801561131a573d6000803e3d6000fd5b505050506040513d602081101561133057600080fd5b50518551869060ff861690811061134357fe5b602002602001018181525050600193505b5050600101611246565b50801561144b576033546040517f4d49e87d000000000000000000000000000000000000000000000000000000008152600060248201819052604482018b90526060600483019081528551606484015285516001600160a01b0390941693634d49e87d938793928e929091829160849091019060208088019102808383895b838110156113f55781810151838201526020016113dd565b50505050905001945050505050602060405180830381600087803b15801561141c57600080fd5b505af1158015611430573d6000803e3d6000fd5b505050506040513d602081101561144657600080fd5b505192505b505060365460009060609067ffffffffffffffff8111801561146c57600080fd5b50604051908082528060200260200182016040528015611496578160200160208202803683370190505b50905060005b848160ff1610156115ad576000868260ff16815181106114b857fe5b6020026020010151905060008d8d8460ff168181106114d357fe5b90506020020135905060008111156115a3576114fa6001600160a01b0383163330846130dd565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d602081101561158357600080fd5b50518451859060ff861690811061159657fe5b6020026020010181815250505b505060010161149c565b50828185815181106115bb57fe5b6020908102919091018101919091526034546040517f4d49e87d000000000000000000000000000000000000000000000000000000008152602481018c9052604481018b90526060600482019081528451606483015284516001600160a01b0390931693634d49e87d9386938f938f939092839260840191878101910280838360005b8381101561165657818101518382015260200161163e565b50505050905001945050505050602060405180830381600087803b15801561167d57600080fd5b505af1158015611691573d6000803e3d6000fd5b505050506040513d60208110156116a757600080fd5b50516038549092506116c491506001600160a01b03163383613165565b600180559998505050505050505050565b60378181548110610cb457fe5b603454604080517f7c61e561000000000000000000000000000000000000000000000000000000008152306004820181905260248201859052915191945060609283926001600160a01b0390911691637c61e561916044808301926000929190829003018186803b15801561175657600080fd5b505afa15801561176a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156117b157600080fd5b81019080805160405193929190846401000000008211156117d157600080fd5b9083019060208201858111156117e657600080fd5b825186602082028301116401000000008211171561180357600080fd5b82525081516020918201928201910280838360005b83811015611830578181015183820152602001611818565b505050509190910160405250508251603354939450600019810193606093506001600160a01b03169150637c61e561908890869060ff871690811061187157fe5b60200260200101516040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060006040518083038186803b1580156118bd57600080fd5b505afa1580156118d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561191857600080fd5b810190808051604051939291908464010000000082111561193857600080fd5b90830190602082018581111561194d57600080fd5b825186602082028301116401000000008211171561196a57600080fd5b82525081516020918201928201910280838360005b8381101561199757818101518382015260200161197f565b505050509050016040525050509050606081518360ff160167ffffffffffffffff811180156119c557600080fd5b506040519080825280602002602001820160405280156119ef578160200160208202803683370190505b50905060005b8360ff168160ff161015611a3c57848160ff1681518110611a1257fe5b6020026020010151828260ff1681518110611a2957fe5b60209081029190910101526001016119f5565b5060005b82518160ff161015611a8757828160ff1681518110611a5b57fe5b60200260200101518282860160ff1681518110611a7457fe5b6020908102919091010152600101611a40565b5093505050505b92915050565b600060026001541415611aee576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155603580546040805160208084028201810190925282815260609390929091830182828015611b4a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b2c575b5050505050905060606036805480602002602001604051908101604052809291908181526020018280548015611ba957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611b8b575b505050505090506060815167ffffffffffffffff81118015611bca57600080fd5b50604051908082528060200260200182016040528015611bf4578160200160208202803683370190505b5090506060835167ffffffffffffffff81118015611c1157600080fd5b50604051908082528060200260200182016040528015611c3b578160200160208202803683370190505b508351855191925001600019018814611c9b576040805162461bcd60e51b815260206004820152600c60248201527f6f7574206f662072616e67650000000000000000000000000000000000000000604482015290519081900360640190fd5b611ca361393f565b506040805160c0810182526033546001600160a01b03908116825260345481166020830152603854169181019190915282516000190160ff16606082015260006080820181905260a082018190525b816060015160ff168160ff161015611d3c578a8a8260ff16818110611d1357fe5b90506020020135848260ff1681518110611d2957fe5b6020908102919091010152600101611cf2565b5060005b82518160ff161015611db2578a8a8284606001510160ff16818110611d6157fe5b90506020020135838260ff1681518110611d7757fe5b6020026020010181815250506000838260ff1681518110611d9457fe5b60200260200101511115611daa57600160808301525b600101611d40565b50806080015115611ec357611ea3612710611e9d61271584600001516001600160a01b031663f9273ffb308860006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018315158152602001828103825284818151815260200191508051906020019060200280838360005b83811015611e46578181015183820152602001611e2e565b5050505090500194505050505060206040518083038186803b158015611e6b57600080fd5b505afa158015611e7f573d6000803e3d6000fd5b505050506040513d6020811015611e9557600080fd5b5051906131ea565b90613243565b83826060015160ff1681518110611eb657fe5b6020026020010181815250505b6040810151611edd906001600160a01b031633308b6130dd565b600081602001516001600160a01b03166384cdd9bc858b8b6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611f50578181015183820152602001611f38565b50505050905001945050505050602060405180830381600087803b158015611f7757600080fd5b505af1158015611f8b573d6000803e3d6000fd5b505050506040513d6020811015611fa157600080fd5b50519050611faf89826132aa565b60a08301526080820151156122835781600001516001600160a01b03166384cdd9bc8486856060015160ff1681518110611fe557fe5b60200260200101518b6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612049578181015183820152602001612031565b50505050905001945050505050602060405180830381600087803b15801561207057600080fd5b505af1158015612084573d6000803e3d6000fd5b505050506040513d602081101561209a57600080fd5b5050835160609067ffffffffffffffff811180156120b757600080fd5b506040519080825280602002602001820160405280156120e1578160200160208202803683370190505b509050600086846060015160ff16815181106120f957fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561215257600080fd5b505afa158015612166573d6000803e3d6000fd5b505050506040513d602081101561217c57600080fd5b50519050801561227f578083866060015160ff168151811061219a57fe5b60200260200101818152505061227985602001516001600160a01b0316634d49e87d8560008f6040518463ffffffff1660e01b81526004018080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561221b578181015183820152602001612203565b50505050905001945050505050602060405180830381600087803b15801561224257600080fd5b505af1158015612256573d6000803e3d6000fd5b505050506040513d602081101561226c57600080fd5b505160a087015190613307565b60a08601525b5050505b60005b60ff81168b111561233d576000836060015160ff168260ff1610156122c357868260ff16815181106122b457fe5b602002602001015190506122e3565b878460600151830360ff16815181106122d857fe5b602002602001015190505b60008d8d8460ff168181106122f457fe5b90506020020135111561233457612334338e8e8560ff1681811061231457fe5b90506020020135836001600160a01b03166131659092919063ffffffff16565b50600101612286565b5060a08201511561236e5761236e338360a0015184604001516001600160a01b03166131659092919063ffffffff16565b5060a001516001805590960398975050505050505050565b6000600260015414156123e0576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260018190555061241b33308660378a60ff16815481106123fe57fe5b6000918252602090912001546001600160a01b03169291906130dd565b603454604080517f78e0fae800000000000000000000000000000000000000000000000000000000815260ff808a1660048301528816602482015260448101879052606481018690526084810185905290516000926001600160a01b0316916378e0fae89160a480830192602092919082900301818787803b1580156124a057600080fd5b505af11580156124b4573d6000803e3d6000fd5b505050506040513d60208110156124ca57600080fd5b505160378054919250612504913391849160ff8b169081106124e857fe5b6000918252602090912001546001600160a01b03169190613165565b600180559695505050505050565b6033546001600160a01b031681565b6036543093506000906000190160ff80821690841610156125e757603454604080517f98899f400000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820188905260ff87166044830152915191909216916398899f40916064808301926020929190829003018186803b1580156125b257600080fd5b505afa1580156125c6573d6000803e3d6000fd5b505050506040513d60208110156125dc57600080fd5b5051915061273d9050565b603454604080517f98899f400000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820188905260ff85166044830152915160009392909216916398899f4091606480820192602092909190829003018186803b15801561266157600080fd5b505afa158015612675573d6000803e3d6000fd5b505050506040513d602081101561268b57600080fd5b5051603354604080517f98899f400000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301526024820185905260ff878a0316604483015291519394509116916398899f4091606480820192602092909190829003018186803b15801561270757600080fd5b505afa15801561271b573d6000803e3d6000fd5b505050506040513d602081101561273157600080fd5b5051925061273d915050565b9392505050565b603454604080517f75d8e3e400000000000000000000000000000000000000000000000000000000815260ff8087166004830152851660248201526044810184905290516000926001600160a01b0316916375d8e3e4916064808301926020929190829003018186803b1580156127ba57600080fd5b505afa1580156127ce573d6000803e3d6000fd5b505050506040513d60208110156127e457600080fd5b5051949350505050565b600054610100900460ff16806128075750612807613361565b80612815575060005460ff16155b6128505760405162461bcd60e51b815260040180806020018281038252602e81526020018061399b602e913960400191505060405180910390fd5b600054610100900460ff1615801561289957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0061ff0019909116610100171660011790555b6128a1613372565b60005b60208160ff1610156129b757846001600160a01b03166382b86600826040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b1580156128f757600080fd5b505afa92505050801561291c57506040513d602081101561291757600080fd5b505160015b612925576129b7565b603580546001810182556000919091527fcfa4bec1d3298408bb5afcfcd9c430549c5b31f8aa5c5848151c0a55f473c34d0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117909155612998908760001961343a565b6129ae6001600160a01b0382168660001961343a565b506001016128a4565b60018160ff16116129f95760405162461bcd60e51b8152600401808060200182810382526024815260200180613a0e6024913960400191505060405180910390fd5b506000805b60208160ff161015612b3757846001600160a01b03166382b86600826040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015612a5157600080fd5b505afa925050508015612a7657506040513d6020811015612a7157600080fd5b505160015b612a7f57612b37565b6036805460018181019092557f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b80180546001600160a01b0384167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092556037805493840181556000527f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae909201805490921681179091559092508290612b2e908760001961343a565b506001016129fe565b60018160ff1611612b795760405162461bcd60e51b81526004018080602001828103825260248152602001806139ea6024913960400191505060405180910390fd5b506035600081548110612b8857fe5b600091825260209091200154603780546001600160a01b03909216916000198101908110612bb257fe5b600091825260209091200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905560015b60355460ff82161015612c6f57603760358260ff1681548110612c1557fe5b6000918252602080832090910154835460018181018655948452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390921691909117905501612bf6565b50612c866001600160a01b0382168660001961343a565b612c9c6001600160a01b0384168560001961343a565b50603380546001600160a01b038087167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556034805486841690831617905560388054928516929091169190911790558015612d04576000805461ff00191690555b50505050565b6034546001600160a01b031681565b6038546001600160a01b031681565b6037546000908210612d81576040805162461bcd60e51b815260206004820152601260248201527f696e646578206f7574206f662072616e67650000000000000000000000000000604482015290519081900360640190fd5b60378281548110612d8e57fe5b6000918252602090912001546001600160a01b031692915050565b60365430945060009060609067ffffffffffffffff81118015612dcb57600080fd5b50604051908082528060200260200182016040528015612df5578160200160208202803683370190505b5060355490915060609067ffffffffffffffff81118015612e1557600080fd5b50604051908082528060200260200182016040528015612e3f578160200160208202803683370190505b5082519091506000190160005b818160ff161015612e8f5787878260ff16818110612e6657fe5b90506020020135848260ff1681518110612e7c57fe5b6020908102919091010152600101612e4c565b5060005b82518160ff161015612ed95787878260ff168401818110612eb057fe5b90506020020135838260ff1681518110612ec657fe5b6020908102919091010152600101612e93565b506033546040517ff9273ffb0000000000000000000000000000000000000000000000000000000081526001600160a01b038a8116600483019081528815156044840152606060248401908152865160648501528651600095939093169363f9273ffb938e9389938d939192909160840190602080870191028083838d5b83811015612f6f578181015183820152602001612f57565b5050505090500194505050505060206040518083038186803b158015612f9457600080fd5b505afa158015612fa8573d6000803e3d6000fd5b505050506040513d6020811015612fbe57600080fd5b505184519091508190859084908110612fd357fe5b6020908102919091018101919091526034546040517ff9273ffb0000000000000000000000000000000000000000000000000000000081526001600160a01b038c8116600483019081528a15156044840152606060248401908152895160648501528951929094169463f9273ffb948f948b948e9493608490920191868101910280838360005b8381101561307257818101518382015260200161305a565b5050505090500194505050505060206040518083038186803b15801561309757600080fd5b505afa1580156130ab573d6000803e3d6000fd5b505050506040513d60208110156130c157600080fd5b50519998505050505050505050565b60368181548110610cb457fe5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052612d04908590613590565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526131e5908490613590565b505050565b6000826131f957506000611a8e565b8282028284828161320657fe5b041461273d5760405162461bcd60e51b81526004018080602001828103825260218152602001806139c96021913960400191505060405180910390fd5b6000808211613299576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816132a257fe5b049392505050565b600082821115613301576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008282018381101561273d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061336c30613641565b15905090565b600054610100900460ff168061338b575061338b613361565b80613399575060005460ff16155b6133d45760405162461bcd60e51b815260040180806020018281038252602e81526020018061399b602e913960400191505060405180910390fd5b600054610100900460ff1615801561341d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0061ff0019909116610100171660011790555b613425613647565b8015613437576000805461ff00191690555b50565b8015806134d95750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156134ab57600080fd5b505afa1580156134bf573d6000803e3d6000fd5b505050506040513d60208110156134d557600080fd5b5051155b6135145760405162461bcd60e51b8152600401808060200182810382526036815260200180613a5c6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b3000000000000000000000000000000000000000000000000000000001790526131e59084905b60606135e5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661370a9092919063ffffffff16565b8051909150156131e55780806020019051602081101561360457600080fd5b50516131e55760405162461bcd60e51b815260040180806020018281038252602a815260200180613a32602a913960400191505060405180910390fd5b3b151590565b600054610100900460ff16806136605750613660613361565b8061366e575060005460ff16155b6136a95760405162461bcd60e51b815260040180806020018281038252602e81526020018061399b602e913960400191505060405180910390fd5b600054610100900460ff161580156136f257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0061ff0019909116610100171660011790555b600180558015613437576000805461ff001916905550565b60606137198484600085613721565b949350505050565b6060824710156137625760405162461bcd60e51b81526004018080602001828103825260268152602001806139756026913960400191505060405180910390fd5b61376b85613641565b6137bc576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061381957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016137dc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461387b576040519150601f19603f3d011682016040523d82523d6000602084013e613880565b606091505b509150915061389082828661389b565b979650505050505050565b606083156138aa57508161273d565b8251156138ba5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139045781810151838201526020016138ec565b50505050905090810190601f1680156139315780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d65746153776170206d7573742068617665206174206c65617374203220746f6b656e736261736553776170206d7573742068617665206174206c65617374203220746f6b656e735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122085e1dc2958e3e7041b44e5d9cfc12c3cc4dd91c92012bca58792c740222d7b8c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256[],uint256,uint256)": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision",
          "deadline": "latest timestamp to accept this transaction",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation"
        },
        "returns": {
          "_0": "amount of LP token user minted and received"
        }
      },
      "calculateRemoveLiquidity(address,uint256)": {
        "params": {
          "account": "the address that is withdrawing tokens",
          "amount": "the amount of LP tokens that would be burned on withdrawal"
        },
        "returns": {
          "_0": "array of token balances that the user will receive"
        }
      },
      "calculateRemoveLiquidityOneToken(address,uint256,uint8)": {
        "params": {
          "account": "the address that is withdrawing tokens",
          "tokenAmount": "the amount of LP token to burn",
          "tokenIndex": "index of which token will be withdrawn"
        },
        "returns": {
          "_0": "availableTokenAmount calculated amount of underlying token available to withdraw"
        }
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "params": {
          "dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "tokenIndexFrom": "the token the user wants to sell",
          "tokenIndexTo": "the token the user wants to buy"
        },
        "returns": {
          "_0": "amount of tokens the user will receive"
        }
      },
      "calculateTokenAmount(address,uint256[],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "account": "address that is depositing or withdrawing tokens",
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision. If a token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "deposit": "whether this is a deposit or a withdrawal"
        },
        "returns": {
          "_0": "token amount the user will receive"
        }
      },
      "getToken(uint256)": {
        "params": {
          "index": "the index of the token"
        },
        "returns": {
          "_0": "address of the token at given index"
        }
      },
      "initialize(address,address,address)": {
        "params": {
          "_baseSwap": "the address of the base Swap contract",
          "_metaLPToken": "the address of the MetaSwap LP token contract",
          "_metaSwap": "the address of the MetaSwap contract"
        }
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "deadline": "latest timestamp to accept this transaction",
          "minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation"
        },
        "returns": {
          "_0": "amounts of tokens user received"
        }
      },
      "removeLiquidityImbalance(uint256[],uint256,uint256)": {
        "params": {
          "amounts": "how much of each token to withdraw",
          "deadline": "latest timestamp to accept this transaction",
          "maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation."
        },
        "returns": {
          "_0": "amount of LP tokens burned"
        }
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "tokenAmount": "the amount of the token you want to receive",
          "tokenIndex": "the index of the token you want to receive"
        },
        "returns": {
          "_0": "amount of chosen token user received"
        }
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "params": {
          "deadline": "latest timestamp to accept this transaction",
          "dx": "the amount of tokens the user wants to swap from",
          "minDy": "the min amount the user would like to receive, or revert.",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        }
      }
    },
    "title": "MetaSwapDeposit",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256[],uint256,uint256)": {
        "notice": "Add liquidity to the pool with the given amounts of tokens"
      },
      "calculateRemoveLiquidity(address,uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateRemoveLiquidityOneToken(address,uint256,uint8)": {
        "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
      },
      "calculateSwap(uint8,uint8,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "calculateTokenAmount(address,uint256[],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running. When withdrawing from the base pool in imbalanced fashion, the recommended slippage setting is 0.2% or higher."
      },
      "getToken(uint256)": {
        "notice": "Returns the address of the pooled token at given index. Reverts if tokenIndex is out of range. This is a flattened representation of the pooled tokens."
      },
      "initialize(address,address,address)": {
        "notice": "Sets the address for the base Swap contract, MetaSwap contract, and the MetaSwap LP token contract."
      },
      "removeLiquidity(uint256,uint256[],uint256)": {
        "notice": "Burn LP tokens to remove liquidity from the pool. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityImbalance(uint256[],uint256,uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "removeLiquidityOneToken(uint256,uint8,uint256,uint256)": {
        "notice": "Remove liquidity from the pool all in one token. Withdraw fee that decays linearly over period of 4 weeks since last deposit will apply."
      },
      "swap(uint8,uint8,uint256,uint256,uint256)": {
        "notice": "Swap two underlying tokens using the meta pool and the base pool"
      }
    },
    "notice": "This contract flattens the LP token in a MetaSwap pool for easier user access. MetaSwap must be deployed before this contract can be initialized successfully. For example, suppose there exists a base Swap pool consisting of [DAI, USDC, USDT]. Then a MetaSwap pool can be created with [sUSD, BaseSwapLPToken] to allow trades between either the LP token or the underlying tokens and sUSD. MetaSwapDeposit flattens the LP token and remaps them to a single array, allowing users to ignore the dependency on BaseSwapLPToken. Using the above example, MetaSwapDeposit can act as a Swap containing [sUSD, DAI, USDC, USDT] tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1659,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1702,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10186,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "baseSwap",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISwap)9500"
      },
      {
        "astId": 10188,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "metaSwap",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IMetaSwap)9311"
      },
      {
        "astId": 10191,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "baseTokens",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_contract(IERC20)2829)dyn_storage"
      },
      {
        "astId": 10194,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "metaTokens",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_contract(IERC20)2829)dyn_storage"
      },
      {
        "astId": 10197,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "tokens",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_contract(IERC20)2829)dyn_storage"
      },
      {
        "astId": 10199,
        "contract": "contracts/meta/MetaSwapDeposit.sol:MetaSwapDeposit",
        "label": "metaLPToken",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(IERC20)2829"
      }
    ],
    "types": {
      "t_array(t_contract(IERC20)2829)dyn_storage": {
        "base": "t_contract(IERC20)2829",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2829": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMetaSwap)9311": {
        "encoding": "inplace",
        "label": "contract IMetaSwap",
        "numberOfBytes": "20"
      },
      "t_contract(ISwap)9500": {
        "encoding": "inplace",
        "label": "contract ISwap",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}